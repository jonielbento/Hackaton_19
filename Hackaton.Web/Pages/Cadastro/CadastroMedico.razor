@page "/cadastro/medico"
@using Hackaton.Web.Models
@using Hackaton.Web.Services
@inject NavigationManager NavigationManager
@inject MedicoService MedicoService
@inject IJSRuntime JSRuntime

<PageTitle>Cadastro de Médico - Sistema Médico</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Cadastro de Médico</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <EditForm Model="medicoRegistro" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="nome" class="form-label">Nome</label>
                        <InputText id="nome" @bind-Value="medicoRegistro.Nome" class="form-control" />
                        <ValidationMessage For="@(() => medicoRegistro.Nome)" />
                    </div>

                    <div class="mb-3">
                        <label for="crm" class="form-label">CRM</label>
                        <InputText id="crm" @bind-Value="medicoRegistro.CRM" class="form-control" />
                        <ValidationMessage For="@(() => medicoRegistro.CRM)" />
                    </div>

                    <div class="mb-3">
                        <label for="especialidade" class="form-label">Especialidade</label>
                        <InputText id="especialidade" @bind-Value="medicoRegistro.Especialidade" class="form-control" />
                        <ValidationMessage For="@(() => medicoRegistro.Especialidade)" />
                    </div>

                    <div class="mb-3">
                        <label for="senha" class="form-label">Senha</label>
                        <InputText id="senha" @bind-Value="medicoRegistro.Senha" class="form-control" type="password" />
                        <ValidationMessage For="@(() => medicoRegistro.Senha)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmarSenha" class="form-label">Confirmar Senha</label>
                        <InputText id="confirmarSenha" @bind-Value="medicoRegistro.ConfirmarSenha" class="form-control" type="password" />
                        <ValidationMessage For="@(() => medicoRegistro.ConfirmarSenha)" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span>Cadastrando...</span>
                            }
                            else
                            {
                                <span>Cadastrar</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="VoltarParaLogin">Voltar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private MedicoRegistroModel medicoRegistro = new();
    private bool isLoading = false;
    private string errorMessage = "";

    private async Task HandleSubmit()
    {
        try
        {
            if (medicoRegistro.Senha != medicoRegistro.ConfirmarSenha)
            {
                errorMessage = "As senhas não coincidem";
                return;
            }

            isLoading = true;
            errorMessage = "";

            var result = await MedicoService.RegisterAsync(medicoRegistro);
            if (result)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cadastro realizado com sucesso!");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Erro ao realizar cadastro";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao cadastrar: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void VoltarParaLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
} 