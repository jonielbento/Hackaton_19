@page "/consultas/paciente/{PacienteId:int}"
@using Hackaton.Application.DTOs
@using Hackaton.Application.Interfaces
@using Hackaton.Domain.Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Minhas Consultas</PageTitle>

<h3>Minhas Consultas</h3>

@if (consultas == null)
{
    <p><em>Carregando...</em></p>
}
else if (!consultas.Any())
{
    <p>Você não possui consultas agendadas.</p>
    <button class="btn btn-primary" @onclick="IrParaAgendarConsulta">Agendar Nova Consulta</button>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="IrParaAgendarConsulta">Agendar Nova Consulta</button>
    </div>
    
    <div class="mb-3">
        <div class="btn-group" role="group">
            <button class="btn @(filtroStatus == null ? "btn-primary" : "btn-outline-primary")" @onclick="() => FiltrarPorStatus(null)">Todas</button>
            <button class="btn @(filtroStatus == StatusConsulta.Agendada ? "btn-primary" : "btn-outline-primary")" @onclick="() => FiltrarPorStatus(StatusConsulta.Agendada)">Agendadas</button>
            <button class="btn @(filtroStatus == StatusConsulta.Confirmada ? "btn-primary" : "btn-outline-primary")" @onclick="() => FiltrarPorStatus(StatusConsulta.Confirmada)">Confirmadas</button>
            <button class="btn @(filtroStatus == StatusConsulta.Cancelada ? "btn-primary" : "btn-outline-primary")" @onclick="() => FiltrarPorStatus(StatusConsulta.Cancelada)">Canceladas</button>
            <button class="btn @(filtroStatus == StatusConsulta.Realizada ? "btn-primary" : "btn-outline-primary")" @onclick="() => FiltrarPorStatus(StatusConsulta.Realizada)">Realizadas</button>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Médico</th>
                <th>Especialidade</th>
                <th>Data/Hora</th>
                <th>Status</th>
                <th>Valor</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var consulta in consultasFiltradas)
            {
                <tr>
                    <td>
                        <a href="/consultas/detalhes/@consulta.Id" class="text-decoration-none">@consulta.NomeMedico</a>
                    </td>
                    <td>@(consulta.Medico?.Especialidade ?? "Não informada")</td>
                    <td>@consulta.DataHora.ToString("dd/MM/yyyy HH:mm")</td>
                    <td>
                        <span class="badge @GetStatusClass(consulta.Status)">@consulta.Status</span>
                        @if (!string.IsNullOrEmpty(consulta.Justificativa) && (consulta.Status == StatusConsulta.Recusada || consulta.Status == StatusConsulta.Cancelada))
                        {
                            <button class="btn btn-sm btn-link" @onclick="() => MostrarJustificativa(consulta.Justificativa)">Ver motivo</button>
                        }
                    </td>
                    <td>@consulta.Valor.ToString("C")</td>
                    <td>
                        <a href="/consultas/detalhes/@consulta.Id" class="btn btn-info btn-sm">Detalhes</a>
                        @if (consulta.Status == StatusConsulta.Agendada || consulta.Status == StatusConsulta.Confirmada)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => CancelarConsulta(consulta.Id)">Cancelar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (mostrarModalJustificativa)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Justificativa</h5>
                    <button type="button" class="btn-close" @onclick="() => mostrarModalJustificativa = false"></button>
                </div>
                <div class="modal-body">
                    <p>@justificativaExibida</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => mostrarModalJustificativa = false">Fechar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (mostrarModalCancelamento)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Justificativa para Cancelamento</h5>
                    <button type="button" class="btn-close" @onclick="() => mostrarModalCancelamento = false"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="justificativa">Por favor, informe o motivo do cancelamento:</label>
                        <textarea id="justificativa" class="form-control" @bind="justificativa" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => mostrarModalCancelamento = false">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarCancelamento">Confirmar Cancelamento</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public int PacienteId { get; set; }

    private List<ConsultaDTO> consultas;
    private List<ConsultaDTO> consultasFiltradas => consultas?
        .Where(c => filtroStatus == null || c.Status == filtroStatus)
        .OrderBy(c => c.DataHora)
        .ToList() ?? new List<ConsultaDTO>();

    private StatusConsulta? filtroStatus = null;
    private bool mostrarModalJustificativa = false;
    private bool mostrarModalCancelamento = false;
    private int consultaIdSelecionada;
    private string justificativa;
    private string justificativaExibida;

    protected override async Task OnInitializedAsync()
    {
        await CarregarConsultas();
    }

    private void IrParaAgendarConsulta()
    {
        NavigationManager.NavigateTo("/medicos");
    }

    private async Task CarregarConsultas()
    {
        try
        {
            Console.WriteLine($"Carregando consultas para o paciente {PacienteId}");
            consultas = await Http.GetFromJsonAsync<List<ConsultaDTO>>($"api/consultas/paciente/{PacienteId}");
            Console.WriteLine($"Consultas carregadas: {consultas?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar consultas: {ex.Message}");
            consultas = new List<ConsultaDTO>();
        }
    }

    private void FiltrarPorStatus(StatusConsulta? status)
    {
        filtroStatus = status;
    }

    private string GetStatusClass(StatusConsulta status)
    {
        return status switch
        {
            StatusConsulta.Agendada => "bg-warning",
            StatusConsulta.Confirmada => "bg-success",
            StatusConsulta.Recusada => "bg-danger",
            StatusConsulta.Cancelada => "bg-secondary",
            StatusConsulta.Realizada => "bg-info",
            _ => "bg-primary"
        };
    }

    private void MostrarJustificativa(string texto)
    {
        justificativaExibida = texto;
        mostrarModalJustificativa = true;
    }

    private void CancelarConsulta(int consultaId)
    {
        consultaIdSelecionada = consultaId;
        justificativa = string.Empty;
        mostrarModalCancelamento = true;
    }

    private async Task ConfirmarCancelamento()
    {
        if (string.IsNullOrWhiteSpace(justificativa))
        {
            return;
        }

        try
        {
            var response = await Http.PutAsJsonAsync($"api/consultas/{consultaIdSelecionada}/cancelar", justificativa);
            if (response.IsSuccessStatusCode)
            {
                await CarregarConsultas();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao cancelar consulta: {ex.Message}");
        }

        mostrarModalCancelamento = false;
    }
}