@page "/agendar-consulta/{MedicoId:int}"
@using Hackaton.Application.DTOs
@using Hackaton.Application.Interfaces
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Agendar Consulta</PageTitle>

<div class="container">
    <h3 class="mb-4">Agendar Consulta</h3>

    @if (medico != null)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Médico Selecionado</h5>
            </div>
            <div class="card-body">
                <h6>@medico.Nome</h6>
                <p>Especialidade: @medico.Especialidade</p>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-header">
            <h5>Selecione um Horário Disponível</h5>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="mb-4">
                <label class="form-label">Data da Consulta</label>
                <input type="date" class="form-control" value="@dataSelecionada.ToString("yyyy-MM-dd")" @onchange="DataAlterada" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
            </div>

            @if (agendasDisponiveis != null && agendasDisponiveis.Any())
            {
                <div class="row">
                    @foreach (var slot in GerarSlotsDeHorarios(agendasDisponiveis))
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card h-100">
                                <div class="card-body text-center">
                                    <h5 class="card-title">@slot.HoraInicio.ToString("HH:mm")</h5>
                                    <p class="card-text text-muted">Duração: 30 minutos</p>
                                    <button class="btn btn-primary" @onclick="() => SelecionarHorario(slot)">
                                        Selecionar
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    Não há horários disponíveis para a data selecionada.
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int MedicoId { get; set; }

    private MedicoDTO? medico;
    private List<AgendaDTO> agendasDisponiveis = new();
    private DateTime dataSelecionada = DateTime.Today;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await CarregarMedico();
        await CarregarAgendas();
    }

    private async Task CarregarMedico()
    {
        try
        {
            medico = await Http.GetFromJsonAsync<MedicoDTO>($"api/medicos/{MedicoId}");
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar informações do médico.";
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private async Task CarregarAgendas()
    {
        try
        {
            agendasDisponiveis = await Http.GetFromJsonAsync<List<AgendaDTO>>($"api/agendas/disponiveis/{MedicoId}/{dataSelecionada:yyyy-MM-dd}");
            
            if (agendasDisponiveis == null || !agendasDisponiveis.Any())
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"Nenhum horário disponível para o médico {MedicoId} na data {dataSelecionada:yyyy-MM-dd}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"Encontrados {agendasDisponiveis.Count} horários disponíveis");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar horários disponíveis.";
            await JSRuntime.InvokeVoidAsync("console.error", "Erro ao carregar agendas:", ex.Message);
        }
    }

    private class SlotHorario
    {
        public DateTime HoraInicio { get; set; }
        public DateTime HoraFim { get; set; }
        public int AgendaId { get; set; }
    }

    private List<SlotHorario> GerarSlotsDeHorarios(List<AgendaDTO> agendas)
    {
        var slots = new List<SlotHorario>();
        
        foreach (var agenda in agendas.Where(a => a.Disponivel))
        {
            var horaAtual = agenda.DataHoraInicio;
            while (horaAtual.AddMinutes(30) <= agenda.DataHoraFim)
            {
                slots.Add(new SlotHorario
                {
                    HoraInicio = horaAtual,
                    HoraFim = horaAtual.AddMinutes(30),
                    AgendaId = agenda.Id
                });
                horaAtual = horaAtual.AddMinutes(30);
            }
        }

        return slots.OrderBy(s => s.HoraInicio).ToList();
    }

    private async Task SelecionarHorario(SlotHorario slot)
    {
        try
        {
            var novaConsulta = new ConsultaRegistroDTO
            {
                MedicoId = MedicoId,
                DataHora = slot.HoraInicio,
                AgendaId = slot.AgendaId
            };

            var response = await Http.PostAsJsonAsync("api/consultas", novaConsulta);
            
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/minhas-consultas");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro ao agendar consulta: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao agendar consulta.";
            await JSRuntime.InvokeVoidAsync("console.error", ex.Message);
        }
    }

    private async Task DataAlterada(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime novaData))
        {
            dataSelecionada = novaData;
            await CarregarAgendas();
        }
    }
}