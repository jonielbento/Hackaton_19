@page "/agendar-consulta/{PacienteId:int}"
@using Hackaton.Application.DTOs
@using Hackaton.Application.Interfaces
@using Hackaton.Domain.Entities
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Agendar Consulta</PageTitle>

<h3>Agendar Consulta</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Selecione um Médico</h5>
            </div>
            <div class="card-body">
                @if (medicos == null)
                {
                    <p><em>Carregando médicos...</em></p>
                }
                else if (!medicos.Any())
                {
                    <p>Nenhum médico disponível no momento.</p>
                }
                else
                {
                    <div class="mb-3">
                        <label for="especialidade" class="form-label">Filtrar por Especialidade:</label>
                        <select id="especialidade" class="form-select" @bind="especialidadeSelecionada">
                            <option value="">Todas as Especialidades</option>
                            @foreach (var especialidade in especialidades)
                            {
                                <option value="@especialidade">@especialidade</option>
                            }
                        </select>
                    </div>
                    
                    <div class="list-group">
                        @foreach (var medico in medicosFiltrados)
                        {
                            <button type="button" 
                                    class="list-group-item list-group-item-action @(medicoSelecionado?.Id == medico.Id ? "active" : "")" 
                                    @onclick="() => SelecionarMedico(medico)">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">Dr(a). @medico.Nome</h5>
                                    <small>@medico.ValorConsulta.ToString("C")</small>
                                </div>
                                <p class="mb-1">@medico.Especialidade</p>
                                <small>CRM: @medico.CRM</small>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card mb-4">
            <div class="card-header">
                <h5>Selecione um Horário</h5>
            </div>
            <div class="card-body">
                @if (medicoSelecionado == null)
                {
                    <p>Selecione um médico para ver os horários disponíveis.</p>
                }
                else if (agendas == null)
                {
                    <p><em>Carregando horários...</em></p>
                }
                else if (!agendas.Any())
                {
                    <p>Não há horários disponíveis para este médico.</p>
                }
                else
                {
                    <div class="mb-3">
                        <label for="dataFiltro" class="form-label">Filtrar por Data:</label>
                        <input type="date" id="dataFiltro" class="form-control" @bind="dataFiltro" />
                    </div>
                    
                    <div class="list-group">
                        @foreach (var agenda in agendasFiltradas)
                        {
                            <button type="button" 
                                    class="list-group-item list-group-item-action @(agendaSelecionada?.Id == agenda.Id ? "active" : "")" 
                                    @onclick="() => SelecionarAgenda(agenda)">
                                <div class="d-flex w-100 justify-content-between">
                                    <h5 class="mb-1">@agenda.DataHoraInicio.ToString("dd/MM/yyyy")</h5>
                                    <small>@agenda.DataHoraInicio.ToString("HH:mm") - @agenda.DataHoraFim.ToString("HH:mm")</small>
                                </div>
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5>Resumo da Consulta</h5>
            </div>
            <div class="card-body">
                @if (medicoSelecionado == null || agendaSelecionada == null)
                {
                    <p>Selecione um médico e um horário para agendar sua consulta.</p>
                }
                else
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Médico:</h6>
                            <p>Dr(a). @medicoSelecionado.Nome</p>
                            <p>Especialidade: @medicoSelecionado.Especialidade</p>
                            <p>CRM: @medicoSelecionado.CRM</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Horário:</h6>
                            <p>Data: @agendaSelecionada.DataHoraInicio.ToString("dd/MM/yyyy")</p>
                            <p>Horário: @agendaSelecionada.DataHoraInicio.ToString("HH:mm") - @agendaSelecionada.DataHoraFim.ToString("HH:mm")</p>
                            <p>Valor: @medicoSelecionado.ValorConsulta.ToString("C")</p>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary" @onclick="ConfirmarAgendamento">Confirmar Agendamento</button>
                        <button class="btn btn-secondary" @onclick="VoltarParaConsultas">Cancelar</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int PacienteId { get; set; }

    private List<MedicoDTO> medicos;
    private List<AgendaDTO> agendas;
    private MedicoDTO medicoSelecionado;
    private AgendaDTO agendaSelecionada;
    private string especialidadeSelecionada = "";
    private DateTime? dataFiltro = DateTime.Today;
    private string errorMessage = string.Empty;

    private List<string> especialidades => medicos?.Select(m => m.Especialidade).Distinct().ToList() ?? new List<string>();

    private List<MedicoDTO> medicosFiltrados => medicos?
        .Where(m => string.IsNullOrEmpty(especialidadeSelecionada) || m.Especialidade == especialidadeSelecionada)
        .ToList() ?? new List<MedicoDTO>();

    private List<AgendaDTO> agendasFiltradas => agendas?
        .Where(a => !dataFiltro.HasValue || a.DataHoraInicio.Date == dataFiltro.Value.Date)
        .OrderBy(a => a.DataHoraInicio)
        .ToList() ?? new List<AgendaDTO>();

    protected override async Task OnInitializedAsync()
    {
        await CarregarMedicos();
    }

    private void VoltarParaConsultas()
    {
        NavigationManager.NavigateTo($"/consultas/paciente/{PacienteId}");
    }

    private async Task CarregarMedicos()
    {
        try
        {
            Console.WriteLine("Carregando lista de médicos");
            medicos = await Http.GetFromJsonAsync<List<MedicoDTO>>("api/medicos");
            Console.WriteLine($"Médicos carregados: {medicos?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar médicos: {ex.Message}");
            errorMessage = "Erro ao carregar a lista de médicos. Por favor, tente novamente.";
            medicos = new List<MedicoDTO>();
        }
    }

    private async Task SelecionarMedico(MedicoDTO medico)
    {
        try
        {
            Console.WriteLine($"Selecionando médico: {medico.Id} - {medico.Nome}");
            medicoSelecionado = medico;
            agendaSelecionada = null;
            await CarregarHorariosDisponiveis(medico.Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao selecionar médico: {ex.Message}");
            errorMessage = "Erro ao carregar os horários disponíveis. Por favor, tente novamente.";
        }
    }

    private async Task CarregarHorariosDisponiveis(int medicoId)
    {
        try
        {
            Console.WriteLine($"Carregando horários disponíveis para o médico {medicoId}");
            agendas = await Http.GetFromJsonAsync<List<AgendaDTO>>($"api/agendas/disponiveis/medico/{medicoId}");
            Console.WriteLine($"Horários carregados: {agendas?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar horários: {ex.Message}");
            errorMessage = "Erro ao carregar os horários disponíveis. Por favor, tente novamente.";
            agendas = new List<AgendaDTO>();
        }
    }

    private void SelecionarAgenda(AgendaDTO agenda)
    {
        Console.WriteLine($"Selecionando agenda: {agenda.Id} - {agenda.DataHoraInicio}");
        agendaSelecionada = agenda;
    }

    private async Task ConfirmarAgendamento()
    {
        if (medicoSelecionado == null || agendaSelecionada == null)
        {
            errorMessage = "Por favor, selecione um médico e um horário antes de confirmar o agendamento.";
            return;
        }

        try
        {
            Console.WriteLine($"Iniciando agendamento de consulta: Paciente={PacienteId}, Médico={medicoSelecionado.Id}, Agenda={agendaSelecionada.Id}");
            
            var consultaDTO = new ConsultaRegistroDTO
            {
                PacienteId = PacienteId,
                MedicoId = medicoSelecionado.Id,
                AgendaId = agendaSelecionada.Id,
                DataHora = agendaSelecionada.DataHoraInicio
            };

            var response = await Http.PostAsJsonAsync("api/consultas", consultaDTO);
            
            Console.WriteLine($"Status da resposta: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Consulta agendada com sucesso");
                VoltarParaConsultas();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro ao agendar consulta: {error}");
                errorMessage = $"Erro ao agendar consulta: {error}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exceção ao agendar consulta: {ex.Message}");
            errorMessage = $"Erro ao agendar consulta: {ex.Message}";
        }
    }
}