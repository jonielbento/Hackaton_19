@inherits LayoutComponentBase
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (AuthService.IsUserAuthenticated())
            {
                <div class="d-flex align-items-center">
                    <span class="me-3">Olá, @AuthService.CurrentUser.Nome</span>
                    <button class="btn btn-sm btn-outline-danger" @onclick="HandleLogout">Sair</button>
                </div>
            }
            else
            {
                <a href="/login" class="btn btn-sm btn-primary">Login</a>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    protected override void OnInitialized()
    {
        // Inscrever-se no evento de alteração de estado de autenticação
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private void OnAuthenticationStateChanged()
    {
        // Forçar a atualização do componente quando o estado de autenticação mudar
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Cancelar a inscrição no evento ao descartar o componente
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    private async Task HandleLogout()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Deseja realmente sair?");
        if (confirmed)
        {
            await AuthService.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
    }
}
